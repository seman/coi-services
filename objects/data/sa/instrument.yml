LogicalInstrument: !Extends_FrameOfReference
  # This is the logical instrument that is part of the observatory
  

InstrumentDevice: !Extends_Device
  # This is the physical instrument
  serial_number: ""
  firmware_version: ""
  hardware_version: ""
  manufacture_date: "" #later will be timeinstance object
  lot_number: ""
  datum_characterization: "" #later will be an object
  

InstrumentModel: !Extends_DeviceModel
  # This defines the characteristics of an instrument model
  model_label: ""
  manufacturer: !Institution
  reference_url: ""
  instrument_family: ""     # values= CAM, CO2, CTD, DO2, FDC, FLO, HYD, IES, MET, MSP, NIT, NUT, OBS, OPT, PRS, RAS, SFL, VEL, WAV, ZPL, default=CAM
  instrument_class: ""  # values=OPTAA, CAMDS, CAMHD, CTDAV, CTDBP, CTDGV, CTDMO, CTDPF, PPSDN, OTISF, FLORT, FLORD, FDCHP, FDCLP, HYDBB, HYDLF, HPIES, MASSP, METBK, NUTR4, NUTNR, DOFST, DOSTA, PARAD, PCO2A, PCO2W, PHSEN, ZPLSC, ZPLSG, BOTPT, PRESF, PREST, OSBSBB, OBSBK, OBSSP, OBSSK, SPKIR, THSPH, TRHPH, TMPSF, VELPT, VELPT, VEL3D, ADCPT, ADCPV, ADCPS, ADCPA, OSMOI, RASFL, WAVSS, default=OPTAA
  data_record_description: "" #later will be an object
  primary_interface: "" # values=RS232, RS245, TCPIP, TTL, ETHER, ACOUS, INDUCT, USB, IE1394, BLUE2TH, REMOVABLE, default=RS232
  secondary_interface: []
  baud_default: ""
  baud_supported: []
  writeable_storage: !enum (name=WriteableStorageType, values=(NONE, PUCK, OTHER), default=NONE)
  # more fields remain


InstrumentAgent: !Extends_AgentDefinition
  agent_version: ""
  driver_module: ""
  driver_class: ""
  driver_client_module: ""
  driver_class_client: ""
  conection_method: ""
  time_source: ""
  event_publisher_origin: ""


InstrumentAgentInstance: !Extends_AgentInstance
  agent_process_id: ""
  driver_module: ""
  driver_class: ""
  svr_addr: ""
  cmd_port: ""
  evt_port: ""
  comms_method: ""
  comms_device_address: ""
  comms_device_port: 0
  comms_server_address: ""
  comms_server_port: ""
  # Replace all the individual items about with driver_config and agent_config dict
  driver_config: {}
  agent_config: {}
  port_agent_work_dir: ""
  port_agent_delimeter: []
  
